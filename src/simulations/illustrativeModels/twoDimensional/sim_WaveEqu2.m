%% sim_WavdEqu - Simulates the wave equation on a rectagular medium while introducing arbitrary perturbations.
%
%  SimRes  =  SIM_WAVEEQU(StimVec,varargin)
%
%% Inputs
%
% * StimVec - vector of perturbations (time x 1), if zero no perturbation
% * is added at a given time point, for any integer value between 1 and 7,
% * it creates a perturbation of a specific type at the given time point.
%
%% Optional argument name,value pair
%
% * plot: plot the activity as it is computed   
% * stimdef: new definition of stimulation
% * storesubsampx: spatial subsampling of the stored pattern
% * edp_params: parameters of the PDE
% * storepattern: store the spatial temporal pattern in a 3d vector
%
%% Outputs
%
% * SimRes - spatio-temporal activity generated by the equation (vertical
% * coordinate x horizontal coordinate x time)
%

% Author : Michel Besserve, MPI for Intelligent Systems, MPI for Biological Cybernetics, Tuebingen, GERMANY
function SimRes  =  sim_WaveEqu2(StimVec, waveParams, varargin)
StoreSubSampT = 1;
StoreSubSampX = 10;
PlotActivity = 0;
if nargin == 0
    Stim = 'random';
end

StorePattern = 1;
EdpParams = [];
% c = 6; % speed of wave;
c = waveParams.c;
dx = 1; % space step;
% dx = .5
dt = 0.1; % time step;
DampWidth = 80;
ScalMap = 1;
[szy szx] = deal([100 100]);
tm = 3000; % time
k = 0.1; % decay (dampening) factor
kborder = 20; % enhancement factor of the decay at boundary
gf = 0.3; % gradient factor
DampGrid = ceil(DampWidth/dx);
EdpParams2 = structpack({'tm','k','kborder','gf','dt','dx','c','szy','szx','DampGrid'});


dp = 0.0016; % droplet probability per one time sterp
dsz = 40; % size
da = .6; % droplet amplitude
ba = .15;%bar amplitude
stimtype = 'droplet';
x0d = 30;
y0d = 30;
Osc = 1;
StimStruct{1} = structpack({'stimtype','Osc','x0d','y0d','da','dsz','dp'});
stimtype = 'bar';
Osc = 1;
StimStruct{2} = structpack({'stimtype','Osc','x0d','y0d','da','ba','dsz','dp'});

stimtype = 'droplet';
x0d = 70;
y0d = 30;
StimStruct{3} = structpack({'stimtype','Osc','x0d','y0d','da','ba','dsz','dp'});
x0d = 70;
y0d = 70;
StimStruct{4} = structpack({'stimtype','Osc','x0d','y0d','da','ba','dsz','dp'});
x0d = 50;
y0d = 50;
StimStruct{5} = structpack({'stimtype','Osc','x0d','y0d','da','ba','dsz','dp'});

x0d = 30;
y0d = 70;
StimStruct{6} = structpack({'stimtype','Osc','x0d','y0d','da','ba','dsz','dp'});
stimtype = 'bar';
xside = 0;
StimStruct{7} = structpack({'stimtype','Osc','x0d','y0d','da','ba','dsz','dp','xside'});

for karg = 1:2:length(varargin)
    switch lower(varargin{karg})
        case {'plot'}
            PlotActivity = varargin{karg+1};
        case {'stimdef'}
            StimDef = varargin{karg+1};
        case {'storesubsampx'}
            StoreSubSampX = varargin{karg+1};
        case {'edp_params'}
            EdpParams = varargin{karg+1};
        case {'storepattern'}
            StorePattern = varargin{karg+1};
        otherwise
            error('unknown argument number %d',karg);
    end
end

EdpParams = mergeStructures(EdpParams2,EdpParams);
structunpack(EdpParams,1);

x = 0:dx:(szx-dx);
y = 0:dx:(szy-dx); % space
t = linspace(0,length(StimVec)*dt,length(StimVec));%0:dt:tm; % time

if StorePattern
    SimRes = zeros(length(x(1:StoreSubSampX:end)),length(y(1:StoreSubSampX:end)),length(t(1:StoreSubSampT:end)));
end

[X,Y]  =  meshgrid(x,y);

Lx = length(x);
Ly = length(y);

u = zeros(Ly,Lx); % initial value
uo = u; % previose  =  curent  = > velocties  = 0
% close all;
if PlotActivity
%hf = figure(1);
clf
ha = axes;
axis off
end
 
D = [0 1 0; 1 -4 1; 0 1 0]; % 2d laplace operator

% sobel operator:
Gx = [-1 0 1; 
    -2 0 2;
    -1 0 1];
Gy = [-1 -2 -1;
    0 0 0;
    1 2 1];

kdt = k*dt;
c1 = dt^2*c^2/dx^2;
lc = 1;
dlc = 15;

% droplet as gaussian 
xd = -2*dsz:dx:2*dsz;
yd = -2*dsz:dx:2*dsz;
[Xd,Yd]  =  meshgrid(xd,yd);
Osc = 1;
if ~Osc
    Zd = -da*exp(-(Xd/dsz).^2-(Yd/dsz).^2);
else
    Zd = -da*exp(-(Xd/dsz).^2-(Yd/dsz).^2).*cos(2*pi*sqrt(Yd.^2+Xd.^2)/dsz)*3;
    uext = zeros(size(u)+2*DampGrid);
    uoext = uext;
end
ktime = 0;
for tt = t
    ktime = ktime+1;
    uconv = conv2(uext,D,'same');
    un = (2-kdt)*uext+(kdt-1)*uoext+c1*uconv; % new
   % modified (MB) to correct mistake: enhanced damping was only at the
   % corners...
    un([1:DampGrid (end-(DampGrid+1)):end],:) = ...
        (2-kborder*kdt)*uext([1:DampGrid (end-(DampGrid+1)):end],:)...
        +(kborder*kdt-1)*uoext([1:DampGrid (end-(DampGrid+1)):end],:)...
    +c1*uconv([1:DampGrid (end-(DampGrid+1)):end],:);

    un(:,[1:DampGrid (end-(DampGrid+1)):end]) = ...
        (2-kborder*kdt)*uext(:,[1:DampGrid (end-(DampGrid+1)):end])...
        +(kborder*kdt-1)*uoext(:,[1:DampGrid (end-(DampGrid+1)):end])...
    +c1*uconv(:,[1:DampGrid (end-(DampGrid+1)):end]);
    uoext = uext;
    u = uext((1:size(u,1))+DampGrid,(1:size(u,2))+DampGrid);
    uo = u; % curent become old
    uext = un; % new become current
    
    if PlotActivity & mod(lc-1,dlc) == 0
        if ScalMap
        imagesc(real(u),[-5 5])
        else
            imagesc(real(u))
        end
        axis off
        axis equal
        drawnow;
        colormap bone(128)
        title(num2str(tt))
    end 
    if StorePattern
        if mod(ktime-1,StoreSubSampT) == 0;
        SimRes(:,:,ceil((ktime-1)/StoreSubSampT)+1) = u(1:StoreSubSampX:end,1:StoreSubSampX:end);
        end
    end
    % Stimulation:
    if StimVec(ktime)~= 0;
        uext = StimulateEdp(uext,StimStruct{StimVec(ktime)},EdpParams);
    end
    
    lc = lc+1;
end
end


function u = StimulateEdp(u,StimStruct,EdpParams)
[Zd,Zidx] = CreateEdpStim(StimStruct,size(u),EdpParams);
u(Zidx{1},Zidx{2}) = u(Zidx{1},Zidx{2})+Zd;
end



function [Zd,Zidx] = CreateEdpStim(StimStruct,usz,EdpParams)
Osc = 1;
structunpack(StimStruct);
dx = EdpParams.dx;
switch lower(stimtype)

    case {'droplet','bar'}
        xd = -2*dsz:dx:2*dsz;
        yd = -2*dsz:dx:2*dsz;
        [Xd,Yd]  =  meshgrid(xd,yd);
        %generates a dropelet either oscillatory or of constant sign
        
        if ~Osc
            Zd = -da*exp(-(Xd/dsz).^2-(Yd/dsz).^2);
        else
            Zd = -da*exp(-(Xd/dsz).^2-(Yd/dsz).^2).*cos(2*pi*sqrt(Yd.^2+Xd.^2)/dsz);

        end
        switch lower(stimtype)
            case 'bar'
                %make the wavelet unidimensional and amplify it a bit
                 Zd = repmat(ba/da*Zd(ceil(size(Zd,1)/2),:),usz(1),1)*2;
                if ~exist('xside')
                 xside = 1;
                end
                 Zidx{2} = EdpParams.DampGrid+(0*2*dsz+1)*xside+...
                     (usz(2)-2*EdpParams.DampGrid-0*2*dsz)*(1-xside)+(-ceil(2*dsz):4*dsz-ceil(2*dsz));
                 Zidx{1} = 1:usz;
            case 'droplet'
                Zidx = {EdpParams.DampGrid+(y0d-2*dsz:y0d+2*dsz),EdpParams.DampGrid+(x0d-2*dsz:x0d+2*dsz)};

        end
    otherwise
        error('unknown stimulation type %s',StimStruct.type)
end

end



